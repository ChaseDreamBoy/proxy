
代理类在程序运行时创建的代理方式被称为动态代理。
也就是说，代理类并不需要在Java代码中定义，而是在运行时动态生成的。
相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，
而不用修改每个代理类的函数

静态代理相比，抽象角色、真实角色都没有变化。变化的只有代理类。

使用动态代理时，需要定义一个位于代理类与委托类之间的中介类，
也叫动态代理类，这个类被要求实现InvocationHandler接口

调用代理类对象的方法时，这个“调用”会转送到中介类的invoke方法中，
参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。

动态代理技术里，由于不管用户调用代理对象的什么方法，
都是调用开发人员编写的处理器的invoke方法（这相当于invoke方法拦截到了代理对象的方法调用）

开发人员通过invoke方法的参数，还可以在拦截的同时，知道用户调用的是什么方法，
因此利用这两个特性，就可以实现一些特殊需求，
例如：拦截用户的访问请求，以检查用户是否有访问权限、动态为某个对象添加额外的功能。


jdk动态代理是由java内部的反射机制来实现的，
cglib动态代理底层则是借助asm来实现的。
总的来说，反射机制在生成类的过程中比较高效，而asm在生成类之后的相关执行过程中比较高效
（可以通过将asm生成的类进行缓存，这样解决asm生成类过程低效问题）。
还有一点必须注意：jdk动态代理的应用前提，必须是目标类基于统一的接口。如果没有上述前提，jdk动态代理不能应用。
由此可以看出，jdk动态代理有一定的局限性，cglib这种第三方类库实现的动态代理应用更加广泛，且在效率上更有优势。















